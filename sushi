#!/bin/bash

# List of required dependencies
DEPENDENCIES=("jq" "grep" "curl" "sed" "parallel")

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0m'
NC='\033[0m' # No Color

# Function to display usage
usage() {
    echo -e "${GREEN}[i] Usage: $0 -d <domain> [-o <output_file>] [-f <file_with_domains>] [-v] [-h]${NC}"
    echo
    echo -e "${GREEN}[i] Options:${NC}"
    echo -e "  ${GREEN}-d <domain>${NC}           Specify the domain to enumerate subdomains."
    echo -e "  ${GREEN}-o <output_file>${NC}      Specify the output file to save results (default: subdomains.txt)."
    echo -e "  ${GREEN}-f <file_with_domains>${NC}Specify a file with a list of domains to process."
    echo -e "  ${GREEN}-h${NC}                    Display this help menu."
    exit 0
}

# Function to check dependencies
check_dependencies() {
    local missing=()
    for dep in "${DEPENDENCIES[@]}"; do
        if ! command -v $dep &> /dev/null; then
            missing+=("$dep")
        fi
    done

    if [ ${#missing[@]} -ne 0 ]; then
        echo -e "${RED}[x] The following dependencies are missing:${NC}"
        for dep in "${missing[@]}"; do
            echo -e "  ${RED}- $dep${NC}"
        done
        echo
        read -p "Would you like to install the missing dependencies? (y/n): " install_choice
        if [[ "$install_choice" == "y" || "$install_choice" == "Y" ]]; then
            echo -e "${GREEN}[i] Installing missing dependencies...${NC}"
            for dep in "${missing[@]}"; do
                case $dep in
                    subfinder)
                        go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
                        ;;
                    dnsx)
                        go install -v github.com/projectdiscovery/dnsx/cmd/dnsx@latest
                        ;;
                    anew)
                        go install -v github.com/tomnomnom/anew@latest
                        ;;
                    *)
                        sudo apt-get install -y $dep || sudo yum install -y $dep || brew install $dep
                        ;;
                esac
            done
        else
            echo -e "${RED}[x] Please install the missing dependencies manually.${NC}"
            exit 1
        fi
    fi
}

# Parse command-line arguments
while getopts "d:o:f:h" opt; do
    case ${opt} in
        d)
            DOMAIN=${OPTARG}
            ;;
        o)
            OUTPUT_FILE=${OPTARG}
            ;;
        f)
            DOMAIN_FILE=${OPTARG}
            ;;
        h)
            usage
            ;;
        *)
            usage
            ;;
    esac
done

# Ensure either DOMAIN or DOMAIN_FILE is provided
if [ -z "$DOMAIN" ] && [ -z "$DOMAIN_FILE" ]; then
    usage
fi

check_dependencies

run_command() {
    local CMD=$1
    eval $CMD 
}

process_domain() {
    local DOMAIN=$1
    local commands=(
        "curl -s https://dns.bufferover.run/dns?q=.$DOMAIN | jq -r .FDNS_A[] | cut -d',' -f2 | sort -u"
        "curl -s \"https://riddler.io/search/exportcsv?q=pld:$DOMAIN\" | grep -Po \"(([\w.-]*)\.([\w]*)\.([A-z]))\w+\" | sort -u"
        "curl -s \"https://api.certspotter.com/v1/issuances?domain=$DOMAIN&include_subdomains=true&expand=dns_names\" | jq .[].dns_names | grep -Po \"(([\w.-]*)\.([\w]*)\.([A-z]))\w+\" | sort -u"
        "curl -s \"http://web.archive.org/cdx/search/cdx?url=*.$DOMAIN/*&output=text&fl=original&collapse=urlkey\" | sed -e 's_https*://__' -e \"s/\/.*//\" | sort -u"
        "curl -s \"https://jldc.me/anubis/subdomains/$DOMAIN\" | grep -Po \"((http|https):\/\/)?(([\w.-]*)\.([\w]*)\.([A-z]))\w+\" | sort -u"
        "curl -s \"https://crt.sh/?q=%25.$DOMAIN&output=json\" | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u"
        "curl -s \"https://api.threatminer.org/v2/domain.php?q=$DOMAIN&rt=5\" | jq -r '.results[]' |grep -o \"\w.*$DOMAIN\" | sort -u"
        "curl -s \"https://jldc.me/anubis/subdomains/$DOMAIN\" | jq -r '.' | grep -o \"\w.*$DOMAIN\""
        "curl -s \"https://www.threatcrowd.org/searchApi/v2/domain/report/?domain=$DOMAIN\" | jq -r '.subdomains' | grep -o \"\w.*$DOMAIN\""
        "curl -s \"https://api.hackertarget.com/hostsearch/?q=$DOMAIN\""
        "curl -s \"https://otx.alienvault.com/api/v1/indicators/domain/$DOMAIN/url_list?limit=100&page=1\" | grep -o '\"hostname\": *\"[^\"]*' | sed 's/\"hostname\": \"//' | sort -u"
        "curl -s \"https://api.subdomain.center/?domain=$DOMAIN\" | jq -r '.[]' | sort -u"
    )

    export -f run_command
    export OUTPUT_FILE


    printf "%s\n" "${commands[@]}" | parallel -j 5 run_command
}

if [ -n "$DOMAIN_FILE" ]; then
    while IFS= read -r domain; do
        process_domain "$domain"
    done < "$DOMAIN_FILE"
else
    process_domain "$DOMAIN"
fi
